Лабораторна робота з ООП номер - 1

Завдання N1 - Задано одновимірний масив А розміру N. Знайти серед всіх від’ємних максимальний елемент масиву та його індекс.

Код

#include <iostream>

int main() {
    int N; // розмір масиву
    std::cout << "Введіть розмір масиву N: ";
    std::cin >> N;
    
    int A[N]; // вхідний масив
    std::cout << "Введіть елементи масиву A: ";
    for (int i = 0; i < N; i++) {
        std::cin >> A[i];
    }

    int max_negative = INT32_MIN; // максимальний від'ємний елемент
    int index = -1; // індекс максимального від'ємного елемента
    
    // Пошук максимального від'ємного елемента та його індекса
    for (int i = 0; i < N; i++) {
        if (A[i] < 0 && A[i] > max_negative) {
            max_negative = A[i];
            index = i;
        }
    }

    // Виведення результатів
    if (index == -1) {
        std::cout << "У масиві відсутні від'ємні елементи." << std::endl;
    } else {
        std::cout << "Максимальний від'ємний елемент: " << max_negative << std::endl;
        std::cout << "Його індекс: " << index << std::endl;
    }

    return 0;
}

Цей код приймає від користувача розмір масиву та його елементи, потім знаходить максимальний від'ємний елемент масиву та виводить його значення та індекс. У випадку, якщо від'ємні елементи відсутні в масиві, виводиться відповідне повідомлення.

Завдання N2 - Знайти мінімальне значення серед елементів, менших заданого числа В, і розташованих до першого елемента, більшого заданого числа А1

Код

#include <iostream>

int main() {
    int N; // розмір масиву
    std::cout << "Введіть розмір масиву N: ";
    std::cin >> N;
    
    int A[N]; // вхідний масив
    std::cout << "Введіть елементи масиву A: ";
    for (int i = 0; i < N; i++) {
        std::cin >> A[i];
    }
    
    int A1; // задане число A1
    std::cout << "Введіть число A1: ";
    std::cin >> A1;
    
    int B; // задане число B
    std::cout << "Введіть число B: ";
    std::cin >> B;
    
    int min_val = INT32_MAX; // мінімальне значення серед елементів, менших за B
    bool found_A1 = false; // флаг, що показує, чи знайдено елемент A1
    for (int i = 0; i < N; i++) {
        if (A[i] > A1) {
            found_A1 = true;
            break;
        } else if (A[i] < B) {
            min_val = std::min(min_val, A[i]);
        }
    }
    
    // Виведення результатів
    if (!found_A1) {
        std::cout << "Елемент A1 не знайдено в масиві." << std::endl;
    } else if (min_val == INT32_MAX) {
        std::cout << "Серед елементів, менших за " << B << ", в масиві відсутні елементи." << std::endl;
    } else {
        std::cout << "Мінімальне значення серед елементів, менших за " << B << ": " << min_val << std::endl;
    }

    return 0;
}

Цей код приймає від користувача розмір масиву, елементи масиву, числа A1 і B. Потім виконує пошук мінімального значення серед елементів масиву, які менші за B, але розташовані до першого елемента, більшого за A1. Результат виводиться на екран. У випадку, якщо елемент A1 не знайдено в масиві або серед елементів відсутні елементи, менші за B, виводяться відповідні повідомлення.

Завжання N3 

Задано дійсні число r і масив An, n  200. Розробити програму, яка підраховує скільки точок з координатами a1, ,a2 , a3, ,a4 , ...,a2n1a2n  належать кругові радіуса r з
центром на початку координат.

Код

#include <iostream>
#include <cmath>

int main() {
    double r; // радіус круга
    std::cout << "Введіть радіус круга r: ";
    std::cin >> r;

    int n; // розмір масиву
    std::cout << "Введіть розмір масиву n (n <= 200): ";
    std::cin >> n;

    double A[200]; // вхідний масив
    std::cout << "Введіть елементи масиву A: ";
    for (int i = 0; i < 2 * n; i++) {
        std::cin >> A[i];
    }

    int points_inside_circle = 0; // кількість точок, що належать кругу
    for (int i = 0; i < 2 * n; i += 2) {
        double x = A[i]; // координата x точки
        double y = A[i + 1]; // координата y точки

        double distance = std::sqrt(x * x + y * y); // відстань від точки до початку координат

        if (distance <= r) {
            points_inside_circle++; // якщо відстань менше або дорівнює радіусу, то точка належить кругу
        }
    }

    // Виведення результату
    std::cout << "Кількість точок, що належать кругові радіуса " << r << ": " << points_inside_circle << std::endl;

    return 0;
}

Цей код приймає від користувача радіус круга r, розмір масиву n (обмежений до 200) та координати точок в масиві A. Потім виконує перевірку для кожної точки, чи вона належить кругу з використанням відстані між точкою і початком координат. Результат - кількість точок, що належать кругу, виводиться на екран.
